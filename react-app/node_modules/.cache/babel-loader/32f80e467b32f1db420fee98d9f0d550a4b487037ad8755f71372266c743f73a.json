{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('username');\n    localStorage.removeItem('loginTime');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: async (username, password, rememberMe = false) => {\n    const response = await api.post('/login', {\n      username,\n      password,\n      remember_me: rememberMe\n    });\n    return response.data;\n  },\n  logout: async () => {\n    try {\n      await api.post('/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      localStorage.removeItem('loginTime');\n    }\n  }\n};\nexport const fileAPI = {\n  upload: async files => {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\nexport const chatAPI = {\n  sendMessage: async (question, knowledgeBase, conversationHistory, sessionName = 'Default') => {\n    const response = await api.post('/chat', {\n      question,\n      knowledge_base: knowledgeBase,\n      conversation_history: conversationHistory,\n      session_name: sessionName\n    });\n    return response.data;\n  }\n};\nexport const sessionAPI = {\n  getSessions: async () => {\n    const response = await api.get('/sessions');\n    return response.data;\n  },\n  createSession: async sessionName => {\n    const response = await api.post('/sessions', {\n      session_name: sessionName\n    });\n    return response.data;\n  },\n  deleteSession: async sessionName => {\n    const response = await api.delete(`/sessions/${sessionName}`);\n    return response.data;\n  },\n  clearSession: async sessionName => {\n    const response = await api.post(`/sessions/${sessionName}/clear`);\n    return response.data;\n  }\n};\nexport const healthAPI = {\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","username","password","rememberMe","post","remember_me","data","logout","console","fileAPI","upload","files","formData","FormData","forEach","file","append","chatAPI","sendMessage","question","knowledgeBase","conversationHistory","sessionName","knowledge_base","conversation_history","session_name","sessionAPI","getSessions","get","createSession","deleteSession","delete","clearSession","healthAPI","check"],"sources":["/home/shubham/Documents/Personal/my-project/react-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      localStorage.removeItem('loginTime');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authAPI = {\n  login: async (username, password, rememberMe = false) => {\n    const response = await api.post('/login', { \n      username, \n      password, \n      remember_me: rememberMe \n    });\n    return response.data;\n  },\n  \n  logout: async () => {\n    try {\n      await api.post('/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      localStorage.removeItem('loginTime');\n    }\n  }\n};\n\nexport const fileAPI = {\n  upload: async (files) => {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    \n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n};\n\nexport const chatAPI = {\n  sendMessage: async (question, knowledgeBase, conversationHistory, sessionName = 'Default') => {\n    const response = await api.post('/chat', {\n      question,\n      knowledge_base: knowledgeBase,\n      conversation_history: conversationHistory,\n      session_name: sessionName\n    });\n    return response.data;\n  },\n};\n\nexport const sessionAPI = {\n  getSessions: async () => {\n    const response = await api.get('/sessions');\n    return response.data;\n  },\n  \n  createSession: async (sessionName) => {\n    const response = await api.post('/sessions', {\n      session_name: sessionName\n    });\n    return response.data;\n  },\n  \n  deleteSession: async (sessionName) => {\n    const response = await api.delete(`/sessions/${sessionName}`);\n    return response.data;\n  },\n  \n  clearSession: async (sessionName) => {\n    const response = await api.post(`/sessions/${sessionName}/clear`);\n    return response.data;\n  }\n};\n\nexport const healthAPI = {\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpCT,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;IACnCT,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,UAAU,GAAG,KAAK,KAAK;IACvD,MAAMX,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,IAAI,CAAC,QAAQ,EAAE;MACxCH,QAAQ;MACRC,QAAQ;MACRG,WAAW,EAAEF;IACf,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACF,MAAM9B,GAAG,CAAC2B,IAAI,CAAC,SAAS,CAAC;IAC3B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,SAAS;MACRH,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;MACpCT,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;MACnCT,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACtC;EACF;AACF,CAAC;AAED,OAAO,MAAMc,OAAO,GAAG;EACrBC,MAAM,EAAE,MAAOC,KAAK,IAAK;IACvB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;MACpBH,QAAQ,CAACI,MAAM,CAAC,OAAO,EAAED,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF,MAAMvB,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,IAAI,CAAC,SAAS,EAAEQ,QAAQ,EAAE;MACnDhC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOY,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMW,OAAO,GAAG;EACrBC,WAAW,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,WAAW,GAAG,SAAS,KAAK;IAC5F,MAAM9B,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,IAAI,CAAC,OAAO,EAAE;MACvCe,QAAQ;MACRI,cAAc,EAAEH,aAAa;MAC7BI,oBAAoB,EAAEH,mBAAmB;MACzCI,YAAY,EAAEH;IAChB,CAAC,CAAC;IACF,OAAO9B,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMoB,UAAU,GAAG;EACxBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMnC,QAAQ,GAAG,MAAMf,GAAG,CAACmD,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOpC,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDuB,aAAa,EAAE,MAAOP,WAAW,IAAK;IACpC,MAAM9B,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,IAAI,CAAC,WAAW,EAAE;MAC3CqB,YAAY,EAAEH;IAChB,CAAC,CAAC;IACF,OAAO9B,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDwB,aAAa,EAAE,MAAOR,WAAW,IAAK;IACpC,MAAM9B,QAAQ,GAAG,MAAMf,GAAG,CAACsD,MAAM,CAAC,aAAaT,WAAW,EAAE,CAAC;IAC7D,OAAO9B,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED0B,YAAY,EAAE,MAAOV,WAAW,IAAK;IACnC,MAAM9B,QAAQ,GAAG,MAAMf,GAAG,CAAC2B,IAAI,CAAC,aAAakB,WAAW,QAAQ,CAAC;IACjE,OAAO9B,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAM2B,SAAS,GAAG;EACvBC,KAAK,EAAE,MAAAA,CAAA,KAAY;IACjB,MAAM1C,QAAQ,GAAG,MAAMf,GAAG,CAACmD,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOpC,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}