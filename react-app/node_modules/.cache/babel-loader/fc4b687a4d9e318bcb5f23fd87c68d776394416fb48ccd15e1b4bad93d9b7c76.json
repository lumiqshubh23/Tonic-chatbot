{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/Personal/my-project/react-app/src/components/ChatInterface.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport FileUpload from './FileUpload';\nimport ChatMessage from './ChatMessage';\nimport { Send, Paperclip, X } from 'lucide-react';\nimport styled from 'styled-components';\nimport toast from 'react-hot-toast';\nimport { fileAPI, chatAPI, chatHistoryAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 105px);\n  background: #f7fafc;\n`;\n\n// FileUploadSection component removed as it's no longer used\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  min-height: 0;\n`;\nconst MessagesContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 0;\n  background: #f7fafc;\n  min-height: 0;\n  max-height: calc(100vh - 200px);\n`;\nconst InputSection = styled.div`\n  padding: 24px;\n  background: white;\n  border-top: 1px solid #e2e8f0;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  position: sticky;\n  bottom: 0;\n  z-index: 10;\n  flex-shrink: 0;\n  transition: all 0.2s ease;\n  min-height: 80px;\n  display: flex;\n  align-items: center;\n`;\nconst InputForm = styled.form`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  width: 100%;\n  flex: 1;\n`;\nconst TextArea = styled.textarea`\n  flex: 1;\n  padding: 16px 20px;\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  font-size: 16px;\n  font-family: inherit;\n  resize: none;\n  min-height: 48px;\n  max-height: 200px;\n  background: white;\n  transition: all 0.2s ease;\n  overflow-y: auto;\n  line-height: 1.5;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  \n  &:focus {\n    outline: none;\n    border-color: #FF6B35;\n    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);\n  }\n  \n  &::placeholder {\n    color: #a0aec0;\n  }\n`;\nconst SendButton = styled.button`\n  padding: 16px 24px;\n  background: linear-gradient(135deg, #FF6B35 0%, #e53e3e 100%);\n  color: white;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 600;\n  font-size: 14px;\n  min-height: 48px;\n  white-space: nowrap;\n  \n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 10px 25px rgba(255, 107, 53, 0.3);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\nconst UploadButton = styled.button`\n  padding: 16px;\n  background: none;\n  border: none;\n  color: #718096;\n  cursor: pointer;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n  min-width: 48px;\n  height: 48px;\n  \n  &:hover {\n    background: #f7fafc;\n    color: #FF6B35;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst UploadInterface = styled.div`\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  right: 0;\n  background: white;\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);\n  margin-bottom: 10px;\n  z-index: 20;\n  animation: slideUp 0.2s ease;\n  \n  @keyframes slideUp {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\nconst UploadHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e2e8f0;\n`;\nconst UploadTitle = styled.h4`\n  color: #2d3748;\n  margin: 0;\n  font-weight: 600;\n  font-size: 16px;\n`;\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  color: #718096;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover {\n    background: #f7fafc;\n    color: #e53e3e;\n  }\n`;\nconst InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  gap: 12px;\n  align-items: flex-end;\n  width: 100%;\n`;\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 60px 20px;\n  color: #718096;\n  \n  h3 {\n    margin-bottom: 12px;\n    color: #4a5568;\n    font-weight: 600;\n  }\n  \n  p {\n    margin-bottom: 20px;\n    font-size: 16px;\n  }\n`;\nconst LoadingContainer = styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  color: #718096;\n  \n  .spinner {\n    margin: 0 auto 16px auto;\n  }\n  \n  p {\n    font-size: 16px;\n    margin: 0;\n  }\n`;\nconst KnowledgeBaseStatus = styled.div`\n  margin: 20px;\n  padding: 16px;\n  background: white;\n  border-radius: 12px;\n  border: 1px solid #e2e8f0;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\nconst StatusHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n`;\nconst StatusTitle = styled.h4`\n  color: #2d3748;\n  margin: 0;\n  font-weight: 600;\n  font-size: 16px;\n`;\nconst ClearButton = styled.button`\n  padding: 6px 12px;\n  background: #e53e3e;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: #c53030;\n  }\n`;\nconst StatusText = styled.p`\n  color: #718096;\n  margin: 0;\n  font-size: 14px;\n`;\nconst TestPlotButton = styled.button`\n  padding: 8px 16px;\n  background: #4a5568;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  margin-left: 12px;\n  \n  &:hover {\n    background: #2d3748;\n  }\n`;\nfunction ChatInterface({\n  currentSessionId,\n  currentSessionData,\n  onSessionChange,\n  onSessionRenamed\n}) {\n  const [userInput, setUserInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [knowledgeBase, setKnowledgeBase] = useState('');\n  const [showFileUpload, setShowFileUpload] = useState(false);\n  const [showUploadInterface, setShowUploadInterface] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [isCreatingNewSession, setIsCreatingNewSession] = useState(false);\n  const messagesEndRef = useRef(null);\n  const textareaRef = useRef(null);\n\n  // Function to generate unique session name based on conversation content (like ChatGPT)\n  const generateSessionName = (question, answer) => {\n    // Clean and process the question\n    const cleanQuestion = question.toLowerCase().replace(/[^\\w\\s]/g, '') // Remove punctuation\n    .trim();\n    if (!cleanQuestion) {\n      return 'New Chat';\n    }\n\n    // Split into words and filter meaningful ones\n    const words = cleanQuestion.split(/\\s+/).filter(word => word.length > 2) // Filter out very short words\n    .filter(word => !['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'can', 'may', 'might', 'must', 'shall'].includes(word)); // Filter common words\n\n    if (words.length === 0) {\n      return 'New Chat';\n    }\n\n    // Take first 4 meaningful words for better uniqueness\n    const meaningfulWords = words.slice(0, 4);\n\n    // Create a title with proper capitalization\n    const title = meaningfulWords.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n\n    // Add timestamp for uniqueness if title is too short\n    if (title.length < 10) {\n      const now = new Date();\n      const timeStr = now.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n      return `${title} (${timeStr})`;\n    }\n\n    // Limit to reasonable length\n    return title.length > 35 ? title.substring(0, 35) + '...' : title;\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  const loadSessionMessages = async () => {\n    if (!currentSessionId) return;\n    try {\n      console.log('Loading messages for session:', currentSessionId);\n      setLoadingMessages(true);\n      const response = await chatHistoryAPI.getSessionHistory(currentSessionId);\n      console.log('Session history response:', response);\n      if (response.success) {\n        // Convert database messages to the format expected by ChatMessage component\n        // We need to create separate messages for user questions and AI answers\n        const formattedMessages = [];\n        response.session.messages.forEach(msg => {\n          // Format timestamp for display\n          const timestamp = new Date(msg.timestamp).toLocaleString();\n\n          // Add user question message\n          formattedMessages.push({\n            q: msg.question,\n            a: '',\n            timestamp: timestamp,\n            type: 'user'\n          });\n\n          // Add AI answer message\n          formattedMessages.push({\n            q: '',\n            a: msg.answer,\n            timestamp: timestamp,\n            type: 'ai'\n          });\n        });\n        setMessages(formattedMessages);\n      } else {\n        toast.error('Failed to load session messages');\n      }\n    } catch (error) {\n      console.error('Load session messages error:', error);\n      toast.error('Failed to load session messages');\n    } finally {\n      setLoadingMessages(false);\n    }\n  };\n\n  // Auto-resize textarea function\n  const adjustTextareaHeight = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const newHeight = Math.min(textarea.scrollHeight, 200);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n  // Load messages when session changes\n  useEffect(() => {\n    console.log('Session change detected:', {\n      currentSessionId,\n      isCreatingNewSession,\n      messagesLength: messages.length\n    });\n    if (currentSessionId && !isCreatingNewSession) {\n      console.log('Loading messages for session:', currentSessionId);\n      loadSessionMessages();\n    } else if (!currentSessionId) {\n      console.log('Clearing messages - no session');\n      setMessages([]);\n    } else if (isCreatingNewSession) {\n      console.log('Skipping message load - creating new session');\n    }\n  }, [currentSessionId, isCreatingNewSession]);\n\n  // Clear messages when starting a new chat (session changes from existing to new)\n  useEffect(() => {\n    // Don't clear messages if we're currently loading or creating a session\n    if (isLoading || isCreatingNewSession) {\n      console.log('Skipping message clear - loading or creating session');\n      return;\n    }\n    if (currentSessionId && messages.length > 0) {\n      // Check if this is a new session (message count is 0)\n      if ((currentSessionData === null || currentSessionData === void 0 ? void 0 : currentSessionData.message_count) === 0) {\n        console.log('New session detected, clearing messages');\n        setMessages([]);\n      }\n    } else if (!currentSessionId && messages.length > 0) {\n      // Clear messages when no session is selected (new chat without existing sessions)\n      console.log('No session selected, clearing messages for new chat');\n      setMessages([]);\n    }\n\n    // Clear messages when entering new chat mode (but not when actively adding messages)\n    if (currentSessionData !== null && currentSessionData !== void 0 && currentSessionData.isNewChatMode && messages.length > 0 && !isLoading) {\n      console.log('New chat mode detected, clearing messages');\n      setMessages([]);\n    }\n  }, [currentSessionId, currentSessionData === null || currentSessionData === void 0 ? void 0 : currentSessionData.message_count, currentSessionData === null || currentSessionData === void 0 ? void 0 : currentSessionData.isNewChatMode, isLoading, isCreatingNewSession]);\n  useEffect(() => {\n    scrollToBottom();\n    console.log('Messages updated:', messages);\n  }, [messages]);\n\n  // Adjust textarea height when userInput changes\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [userInput]);\n\n  // Monitor for Chrome extension interference\n  useEffect(() => {\n    const originalFetch = window.fetch;\n    const originalXHROpen = XMLHttpRequest.prototype.open;\n\n    // Monitor fetch requests\n    window.fetch = function (...args) {\n      const url = args[0];\n      if (typeof url === 'string' && url.includes('chrome-extension://')) {\n        var _args$;\n        console.warn('Chrome extension request detected:', {\n          url,\n          method: ((_args$ = args[1]) === null || _args$ === void 0 ? void 0 : _args$.method) || 'GET',\n          timestamp: new Date().toISOString(),\n          stack: new Error().stack\n        });\n      }\n      return originalFetch.apply(this, args);\n    };\n\n    // Monitor XMLHttpRequest\n    XMLHttpRequest.prototype.open = function (method, url, ...args) {\n      if (typeof url === 'string' && url.includes('chrome-extension://')) {\n        console.warn('Chrome extension XMLHttpRequest detected:', {\n          url,\n          method,\n          timestamp: new Date().toISOString(),\n          stack: new Error().stack\n        });\n      }\n      return originalXHROpen.apply(this, [method, url, ...args]);\n    };\n\n    // Cleanup function\n    return () => {\n      window.fetch = originalFetch;\n      XMLHttpRequest.prototype.open = originalXHROpen;\n    };\n  }, []);\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  // Add handlers to detect and potentially mitigate Chrome extension interference\n  const handleFocus = e => {\n    // Log focus events to help debug extension issues\n    console.log('TextArea focused', {\n      target: e.target,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent\n    });\n  };\n  const handleBlur = e => {\n    // Log blur events to help debug extension issues\n    console.log('TextArea blurred', {\n      target: e.target,\n      timestamp: new Date().toISOString()\n    });\n  };\n  const handleInput = e => {\n    // Prevent potential extension interference by ensuring proper event handling\n    setUserInput(e.target.value);\n    adjustTextareaHeight();\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userInput.trim() || isLoading) return;\n\n    // If no current session, create a default one\n    let sessionId = currentSessionId;\n    let sessionName = (currentSessionData === null || currentSessionData === void 0 ? void 0 : currentSessionData.session_name) || 'Default';\n\n    // Check if we're in new chat mode (no existing chats)\n    const isNewChatMode = (currentSessionData === null || currentSessionData === void 0 ? void 0 : currentSessionData.isNewChatMode) && (currentSessionData === null || currentSessionData === void 0 ? void 0 : currentSessionData.shouldCreateSessionOnFirstMessage);\n    if (!sessionId && !isNewChatMode) {\n      try {\n        console.log('No active session, creating unique session...');\n        setIsCreatingNewSession(true);\n\n        // Generate unique session name based on the first message\n        const question = userInput.trim();\n        const uniqueSessionName = generateSessionName(question, '');\n        console.log('Generated unique session name:', uniqueSessionName);\n        const createResponse = await chatHistoryAPI.createChatSession(uniqueSessionName);\n        if (createResponse.success) {\n          sessionId = createResponse.session.id;\n          sessionName = createResponse.session.session_name;\n          console.log('Unique session created:', sessionId, 'with name:', sessionName);\n\n          // Update the parent component with the new session\n          if (onSessionChange) {\n            onSessionChange({\n              session_id: sessionId,\n              session_name: sessionName,\n              created_at: createResponse.session.created_at,\n              message_count: 0\n            });\n          }\n        } else {\n          console.error('Failed to create unique session:', createResponse.message);\n          toast.error(`Failed to create chat session: ${createResponse.message}`);\n          setIsCreatingNewSession(false);\n          return;\n        }\n      } catch (error) {\n        console.error('Error creating unique session:', error);\n        toast.error(`Failed to create chat session: ${error.message || 'Unknown error'}`);\n        setIsCreatingNewSession(false);\n        return;\n      }\n    }\n\n    // If in new chat mode, create session now (first message)\n    if (isNewChatMode) {\n      try {\n        console.log('New chat mode: creating session on first message...');\n        setIsCreatingNewSession(true);\n\n        // Generate unique session name based on the first message\n        const question = userInput.trim();\n        const uniqueSessionName = generateSessionName(question, '');\n        console.log('Generated unique session name:', uniqueSessionName);\n        const createResponse = await chatHistoryAPI.createChatSession(uniqueSessionName);\n        if (createResponse.success) {\n          sessionId = createResponse.session.id;\n          sessionName = createResponse.session.session_name;\n          console.log('Session created on first message:', sessionId, 'with name:', sessionName);\n\n          // Update the parent component with the new session\n          if (onSessionChange) {\n            onSessionChange({\n              session_id: sessionId,\n              session_name: sessionName,\n              created_at: createResponse.session.created_at,\n              message_count: 0\n            });\n          }\n        } else {\n          console.error('Failed to create session on first message:', createResponse.message);\n          toast.error(`Failed to create chat session: ${createResponse.message}`);\n          setIsCreatingNewSession(false);\n          return;\n        }\n      } catch (error) {\n        console.error('Error creating session on first message:', error);\n        toast.error(`Failed to create chat session: ${error.message || 'Unknown error'}`);\n        setIsCreatingNewSession(false);\n        return;\n      }\n    }\n    const question = userInput.trim();\n    setUserInput('');\n    setIsLoading(true);\n\n    // Add user message to local state\n    const userMessage = {\n      q: question,\n      a: '',\n      timestamp: new Date().toLocaleString(),\n      type: 'user'\n    };\n    console.log('Adding user message to state:', userMessage);\n    setMessages(prev => {\n      const newMessages = [...prev, userMessage];\n      console.log('Updated messages array:', newMessages);\n      return newMessages;\n    });\n    try {\n      console.log('Sending message to API:', {\n        question,\n        knowledgeBase: knowledgeBase ? 'Present' : 'Empty',\n        sessionId: currentSessionId,\n        currentSessionName: currentSessionData === null || currentSessionData === void 0 ? void 0 : currentSessionData.session_name\n      });\n\n      // Get AI response from backend\n      const response = await chatAPI.sendMessage(question, knowledgeBase, messages, sessionName);\n      if (response.success) {\n        var _response$response, _response$tables, _response$plot, _response$plot_code, _response$sources;\n        // Add AI response as a separate message\n        const aiMessage = {\n          q: '',\n          a: response.response,\n          timestamp: response.timestamp,\n          type: 'ai',\n          tables: response.tables || [],\n          plot: response.plot,\n          plot_code: response.plot_code,\n          sources: response.sources\n        };\n\n        // Debug logging\n        console.log('🤖 AI Response received:', {\n          responseLength: (_response$response = response.response) === null || _response$response === void 0 ? void 0 : _response$response.length,\n          tablesCount: ((_response$tables = response.tables) === null || _response$tables === void 0 ? void 0 : _response$tables.length) || 0,\n          hasPlot: !!response.plot,\n          plotLength: ((_response$plot = response.plot) === null || _response$plot === void 0 ? void 0 : _response$plot.length) || 0,\n          hasPlotCode: !!response.plot_code,\n          plotCodeLength: ((_response$plot_code = response.plot_code) === null || _response$plot_code === void 0 ? void 0 : _response$plot_code.length) || 0,\n          sourcesCount: ((_response$sources = response.sources) === null || _response$sources === void 0 ? void 0 : _response$sources.length) || 0\n        });\n\n        // Additional plot debugging\n        if (response.plot) {\n          console.log('🎨 Plot data received:', {\n            plotDataLength: response.plot.length,\n            plotDataPreview: response.plot.substring(0, 100) + '...'\n          });\n        }\n        if (response.plot_code) {\n          console.log('📝 Plot code received:', {\n            plotCodeLength: response.plot_code.length,\n            plotCodePreview: response.plot_code.substring(0, 200) + '...'\n          });\n        }\n        setMessages(prev => [...prev, aiMessage]);\n\n        // Session already has unique name, no need to rename\n      } else {\n        toast.error('Failed to get response from AI');\n      }\n    } catch (error) {\n      toast.error('Failed to get response. Please try again.');\n      console.error('Error:', error);\n    } finally {\n      setIsLoading(false);\n      setIsCreatingNewSession(false);\n    }\n  };\n  const handleFileUpload = async files => {\n    setIsUploading(true);\n    try {\n      const response = await fileAPI.upload(files);\n      if (response.success) {\n        setKnowledgeBase(response.knowledge_base);\n        toast.success(response.message);\n        setShowUploadInterface(false);\n      } else {\n        toast.error('Failed to process files');\n      }\n    } catch (error) {\n      console.error('File upload error:', error);\n      toast.error('Failed to upload files. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const clearKnowledgeBase = () => {\n    setKnowledgeBase('');\n    toast.success('Knowledge base cleared');\n  };\n\n  // Test plot functionality\n  const testPlotGeneration = async () => {\n    try {\n      console.log('🧪 Testing plot generation...');\n\n      // First test the simple plot endpoint\n      const testResponse = await fetch('http://localhost:5000/api/test-plot');\n      const testData = await testResponse.json();\n      if (testData.success) {\n        console.log('✅ Simple plot test successful:', testData);\n\n        // Add test plot to messages\n        const testPlotMessage = {\n          q: 'Test Plot Generation',\n          a: 'This is a test plot to verify the plot generation functionality is working correctly.',\n          timestamp: new Date().toLocaleString(),\n          type: 'ai',\n          plot: testData.plot,\n          plot_code: 'Test plot code'\n        };\n        setMessages(prev => [...prev, testPlotMessage]);\n        toast.success('Simple plot test successful!');\n      } else {\n        console.error('❌ Simple plot test failed:', testData);\n        toast.error('Simple plot test failed');\n      }\n\n      // Then test the full chat with plot generation\n      const testQuestion = \"Create a bar chart showing sales data for Q1, Q2, Q3, Q4 with values 12000, 15000, 18000, 22000\";\n      const response = await chatAPI.sendMessage(testQuestion, knowledgeBase, messages, 'Test Session');\n      console.log('🧪 Full chat test response:', response);\n      if (response.success) {\n        var _response$plot2, _response$plot_code2;\n        console.log('🧪 Plot data received:', {\n          hasPlot: !!response.plot,\n          plotLength: ((_response$plot2 = response.plot) === null || _response$plot2 === void 0 ? void 0 : _response$plot2.length) || 0,\n          hasPlotCode: !!response.plot_code,\n          plotCodeLength: ((_response$plot_code2 = response.plot_code) === null || _response$plot_code2 === void 0 ? void 0 : _response$plot_code2.length) || 0\n        });\n\n        // Add test message to display\n        const testMessage = {\n          q: testQuestion,\n          a: response.response,\n          timestamp: response.timestamp,\n          type: 'ai',\n          tables: response.tables || [],\n          plot: response.plot,\n          plot_code: response.plot_code,\n          sources: response.sources\n        };\n        setMessages(prev => [...prev, testMessage]);\n        toast.success('Full plot test completed! Check console for details.');\n      } else {\n        toast.error('Full plot test failed');\n      }\n    } catch (error) {\n      console.error('Plot test error:', error);\n      toast.error('Plot test failed');\n    }\n  };\n\n  // This line is no longer needed as we're using the messages state directly\n\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    children: [knowledgeBase && /*#__PURE__*/_jsxDEV(KnowledgeBaseStatus, {\n      children: [/*#__PURE__*/_jsxDEV(StatusHeader, {\n        children: /*#__PURE__*/_jsxDEV(StatusTitle, {\n          children: \"\\uD83D\\uDCDA Knowledge Base Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatusText, {\n        children: [\"Knowledge base contains \", knowledgeBase.length, \" characters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(MessagesContainer, {\n        children: [loadingMessages ? /*#__PURE__*/_jsxDEV(EmptyState, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\",\n            style: {\n              width: '32px',\n              height: '32px',\n              margin: '0 auto 16px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading messages...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 13\n        }, this) : messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyState, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"How can I help you today? \\uD83E\\uDD16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: knowledgeBase ? \"I have access to your uploaded documents. Ask me anything!\" : \"I'm here to help! Ask me anything or upload documents to get started.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n            message: message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 17\n          }, this))\n        }, void 0, false), isLoading && /*#__PURE__*/_jsxDEV(LoadingContainer, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\",\n            style: {\n              width: '32px',\n              height: '32px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Generating response...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSection, {\n        children: /*#__PURE__*/_jsxDEV(InputWrapper, {\n          children: [showUploadInterface && /*#__PURE__*/_jsxDEV(UploadInterface, {\n            children: [/*#__PURE__*/_jsxDEV(UploadHeader, {\n              children: [/*#__PURE__*/_jsxDEV(UploadTitle, {\n                children: \"\\uD83D\\uDCC1 Upload Documents\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 881,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n                onClick: () => setShowUploadInterface(false),\n                children: /*#__PURE__*/_jsxDEV(X, {\n                  size: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 883,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 882,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n              onFileUpload: handleFileUpload,\n              isUploading: isUploading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 886,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(UploadButton, {\n              type: \"button\",\n              onClick: () => setShowUploadInterface(!showUploadInterface),\n              disabled: isLoading,\n              title: \"Upload documents\",\n              children: /*#__PURE__*/_jsxDEV(Paperclip, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 897,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n              ref: textareaRef,\n              value: userInput,\n              onChange: handleInput,\n              onFocus: handleFocus,\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              placeholder: knowledgeBase ? \"Message TONIC AI...\" : \"Message TONIC AI...\",\n              disabled: isLoading\n              // Add attributes to help prevent extension interference\n              ,\n              autoComplete: \"off\",\n              spellCheck: \"false\",\n              \"data-gramm\": \"false\",\n              \"data-gramm_editor\": \"false\",\n              \"data-enable-grammarly\": \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SendButton, {\n              type: \"submit\",\n              disabled: isLoading || !userInput.trim(),\n              children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"spinner\",\n                style: {\n                  width: '20px',\n                  height: '20px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 922,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(Send, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 19\n              }, this), \"Send\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 877,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 821,\n    columnNumber: 5\n  }, this);\n}\nexport default ChatInterface;","map":{"version":3,"names":["React","useState","useRef","useEffect","FileUpload","ChatMessage","Send","Paperclip","X","styled","toast","fileAPI","chatAPI","chatHistoryAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatContainer","div","ChatSection","MessagesContainer","InputSection","InputForm","form","TextArea","textarea","SendButton","button","UploadButton","UploadInterface","UploadHeader","UploadTitle","h4","CloseButton","InputWrapper","EmptyState","LoadingContainer","KnowledgeBaseStatus","StatusHeader","StatusTitle","ClearButton","StatusText","p","TestPlotButton","ChatInterface","currentSessionId","currentSessionData","onSessionChange","onSessionRenamed","userInput","setUserInput","isLoading","setIsLoading","isUploading","setIsUploading","knowledgeBase","setKnowledgeBase","showFileUpload","setShowFileUpload","showUploadInterface","setShowUploadInterface","messages","setMessages","loadingMessages","setLoadingMessages","isCreatingNewSession","setIsCreatingNewSession","messagesEndRef","textareaRef","generateSessionName","question","answer","cleanQuestion","toLowerCase","replace","trim","words","split","filter","word","length","includes","meaningfulWords","slice","title","map","charAt","toUpperCase","join","now","Date","timeStr","toLocaleTimeString","hour","minute","hour12","substring","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadSessionMessages","console","log","response","getSessionHistory","success","formattedMessages","session","forEach","msg","timestamp","toLocaleString","push","q","a","type","error","adjustTextareaHeight","style","height","newHeight","Math","min","scrollHeight","messagesLength","message_count","isNewChatMode","originalFetch","window","fetch","originalXHROpen","XMLHttpRequest","prototype","open","args","url","_args$","warn","method","toISOString","stack","Error","apply","handleKeyDown","e","key","shiftKey","preventDefault","handleSubmit","handleFocus","target","userAgent","navigator","handleBlur","handleInput","value","sessionId","sessionName","session_name","shouldCreateSessionOnFirstMessage","uniqueSessionName","createResponse","createChatSession","id","session_id","created_at","message","userMessage","prev","newMessages","currentSessionName","sendMessage","_response$response","_response$tables","_response$plot","_response$plot_code","_response$sources","aiMessage","tables","plot","plot_code","sources","responseLength","tablesCount","hasPlot","plotLength","hasPlotCode","plotCodeLength","sourcesCount","plotDataLength","plotDataPreview","plotCodePreview","handleFileUpload","files","upload","knowledge_base","clearKnowledgeBase","testPlotGeneration","testResponse","testData","json","testPlotMessage","testQuestion","_response$plot2","_response$plot_code2","testMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","width","margin","index","ref","onClick","size","onFileUpload","onSubmit","disabled","onChange","onFocus","onBlur","onKeyDown","placeholder","autoComplete","spellCheck"],"sources":["/home/shubham/Documents/Personal/my-project/react-app/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport FileUpload from './FileUpload';\nimport ChatMessage from './ChatMessage';\nimport { Send, Paperclip, X } from 'lucide-react';\nimport styled from 'styled-components';\nimport toast from 'react-hot-toast';\nimport { fileAPI, chatAPI, chatHistoryAPI } from '../services/api';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 105px);\n  background: #f7fafc;\n`;\n\n// FileUploadSection component removed as it's no longer used\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  min-height: 0;\n`;\n\nconst MessagesContainer = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 0;\n  background: #f7fafc;\n  min-height: 0;\n  max-height: calc(100vh - 200px);\n`;\n\nconst InputSection = styled.div`\n  padding: 24px;\n  background: white;\n  border-top: 1px solid #e2e8f0;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  position: sticky;\n  bottom: 0;\n  z-index: 10;\n  flex-shrink: 0;\n  transition: all 0.2s ease;\n  min-height: 80px;\n  display: flex;\n  align-items: center;\n`;\n\nconst InputForm = styled.form`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  width: 100%;\n  flex: 1;\n`;\n\nconst TextArea = styled.textarea`\n  flex: 1;\n  padding: 16px 20px;\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  font-size: 16px;\n  font-family: inherit;\n  resize: none;\n  min-height: 48px;\n  max-height: 200px;\n  background: white;\n  transition: all 0.2s ease;\n  overflow-y: auto;\n  line-height: 1.5;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  \n  &:focus {\n    outline: none;\n    border-color: #FF6B35;\n    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);\n  }\n  \n  &::placeholder {\n    color: #a0aec0;\n  }\n`;\n\nconst SendButton = styled.button`\n  padding: 16px 24px;\n  background: linear-gradient(135deg, #FF6B35 0%, #e53e3e 100%);\n  color: white;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 600;\n  font-size: 14px;\n  min-height: 48px;\n  white-space: nowrap;\n  \n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 10px 25px rgba(255, 107, 53, 0.3);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst UploadButton = styled.button`\n  padding: 16px;\n  background: none;\n  border: none;\n  color: #718096;\n  cursor: pointer;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n  min-width: 48px;\n  height: 48px;\n  \n  &:hover {\n    background: #f7fafc;\n    color: #FF6B35;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst UploadInterface = styled.div`\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  right: 0;\n  background: white;\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);\n  margin-bottom: 10px;\n  z-index: 20;\n  animation: slideUp 0.2s ease;\n  \n  @keyframes slideUp {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\n\nconst UploadHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e2e8f0;\n`;\n\nconst UploadTitle = styled.h4`\n  color: #2d3748;\n  margin: 0;\n  font-weight: 600;\n  font-size: 16px;\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  color: #718096;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover {\n    background: #f7fafc;\n    color: #e53e3e;\n  }\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  gap: 12px;\n  align-items: flex-end;\n  width: 100%;\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 60px 20px;\n  color: #718096;\n  \n  h3 {\n    margin-bottom: 12px;\n    color: #4a5568;\n    font-weight: 600;\n  }\n  \n  p {\n    margin-bottom: 20px;\n    font-size: 16px;\n  }\n`;\n\nconst LoadingContainer = styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  color: #718096;\n  \n  .spinner {\n    margin: 0 auto 16px auto;\n  }\n  \n  p {\n    font-size: 16px;\n    margin: 0;\n  }\n`;\n\nconst KnowledgeBaseStatus = styled.div`\n  margin: 20px;\n  padding: 16px;\n  background: white;\n  border-radius: 12px;\n  border: 1px solid #e2e8f0;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\n\nconst StatusHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n`;\n\nconst StatusTitle = styled.h4`\n  color: #2d3748;\n  margin: 0;\n  font-weight: 600;\n  font-size: 16px;\n`;\n\nconst ClearButton = styled.button`\n  padding: 6px 12px;\n  background: #e53e3e;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: #c53030;\n  }\n`;\n\nconst StatusText = styled.p`\n  color: #718096;\n  margin: 0;\n  font-size: 14px;\n`;\n\nconst TestPlotButton = styled.button`\n  padding: 8px 16px;\n  background: #4a5568;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  margin-left: 12px;\n  \n  &:hover {\n    background: #2d3748;\n  }\n`;\n\nfunction ChatInterface({ currentSessionId, currentSessionData, onSessionChange, onSessionRenamed }) {\n  const [userInput, setUserInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [knowledgeBase, setKnowledgeBase] = useState('');\n  const [showFileUpload, setShowFileUpload] = useState(false);\n  const [showUploadInterface, setShowUploadInterface] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [isCreatingNewSession, setIsCreatingNewSession] = useState(false);\n  const messagesEndRef = useRef(null);\n  const textareaRef = useRef(null);\n\n  // Function to generate unique session name based on conversation content (like ChatGPT)\n  const generateSessionName = (question, answer) => {\n    // Clean and process the question\n    const cleanQuestion = question.toLowerCase()\n      .replace(/[^\\w\\s]/g, '') // Remove punctuation\n      .trim();\n    \n    if (!cleanQuestion) {\n      return 'New Chat';\n    }\n    \n    // Split into words and filter meaningful ones\n    const words = cleanQuestion.split(/\\s+/)\n      .filter(word => word.length > 2) // Filter out very short words\n      .filter(word => !['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'can', 'may', 'might', 'must', 'shall'].includes(word)); // Filter common words\n    \n    if (words.length === 0) {\n      return 'New Chat';\n    }\n    \n    // Take first 4 meaningful words for better uniqueness\n    const meaningfulWords = words.slice(0, 4);\n    \n    // Create a title with proper capitalization\n    const title = meaningfulWords\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n    \n    // Add timestamp for uniqueness if title is too short\n    if (title.length < 10) {\n      const now = new Date();\n      const timeStr = now.toLocaleTimeString('en-US', { \n        hour: '2-digit', \n        minute: '2-digit',\n        hour12: false \n      });\n      return `${title} (${timeStr})`;\n    }\n    \n    // Limit to reasonable length\n    return title.length > 35 ? title.substring(0, 35) + '...' : title;\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const loadSessionMessages = async () => {\n    if (!currentSessionId) return;\n    \n    try {\n      console.log('Loading messages for session:', currentSessionId);\n      setLoadingMessages(true);\n      const response = await chatHistoryAPI.getSessionHistory(currentSessionId);\n      console.log('Session history response:', response);\n      \n      if (response.success) {\n        // Convert database messages to the format expected by ChatMessage component\n        // We need to create separate messages for user questions and AI answers\n        const formattedMessages = [];\n        \n        response.session.messages.forEach(msg => {\n          // Format timestamp for display\n          const timestamp = new Date(msg.timestamp).toLocaleString();\n          \n          // Add user question message\n          formattedMessages.push({\n            q: msg.question,\n            a: '',\n            timestamp: timestamp,\n            type: 'user'\n          });\n          \n          // Add AI answer message\n          formattedMessages.push({\n            q: '',\n            a: msg.answer,\n            timestamp: timestamp,\n            type: 'ai'\n          });\n        });\n        \n        setMessages(formattedMessages);\n      } else {\n        toast.error('Failed to load session messages');\n      }\n    } catch (error) {\n      console.error('Load session messages error:', error);\n      toast.error('Failed to load session messages');\n    } finally {\n      setLoadingMessages(false);\n    }\n  };\n\n  // Auto-resize textarea function\n  const adjustTextareaHeight = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const newHeight = Math.min(textarea.scrollHeight, 200);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n  // Load messages when session changes\n  useEffect(() => {\n    console.log('Session change detected:', {\n      currentSessionId,\n      isCreatingNewSession,\n      messagesLength: messages.length\n    });\n    \n    if (currentSessionId && !isCreatingNewSession) {\n      console.log('Loading messages for session:', currentSessionId);\n      loadSessionMessages();\n    } else if (!currentSessionId) {\n      console.log('Clearing messages - no session');\n      setMessages([]);\n    } else if (isCreatingNewSession) {\n      console.log('Skipping message load - creating new session');\n    }\n  }, [currentSessionId, isCreatingNewSession]);\n\n  // Clear messages when starting a new chat (session changes from existing to new)\n  useEffect(() => {\n    // Don't clear messages if we're currently loading or creating a session\n    if (isLoading || isCreatingNewSession) {\n      console.log('Skipping message clear - loading or creating session');\n      return;\n    }\n\n    if (currentSessionId && messages.length > 0) {\n      // Check if this is a new session (message count is 0)\n      if (currentSessionData?.message_count === 0) {\n        console.log('New session detected, clearing messages');\n        setMessages([]);\n      }\n    } else if (!currentSessionId && messages.length > 0) {\n      // Clear messages when no session is selected (new chat without existing sessions)\n      console.log('No session selected, clearing messages for new chat');\n      setMessages([]);\n    }\n    \n    // Clear messages when entering new chat mode (but not when actively adding messages)\n    if (currentSessionData?.isNewChatMode && messages.length > 0 && !isLoading) {\n      console.log('New chat mode detected, clearing messages');\n      setMessages([]);\n    }\n  }, [currentSessionId, currentSessionData?.message_count, currentSessionData?.isNewChatMode, isLoading, isCreatingNewSession]);\n\n  useEffect(() => {\n    scrollToBottom();\n    console.log('Messages updated:', messages);\n  }, [messages]);\n\n  // Adjust textarea height when userInput changes\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [userInput]);\n\n  // Monitor for Chrome extension interference\n  useEffect(() => {\n    const originalFetch = window.fetch;\n    const originalXHROpen = XMLHttpRequest.prototype.open;\n    \n    // Monitor fetch requests\n    window.fetch = function(...args) {\n      const url = args[0];\n      if (typeof url === 'string' && url.includes('chrome-extension://')) {\n        console.warn('Chrome extension request detected:', {\n          url,\n          method: args[1]?.method || 'GET',\n          timestamp: new Date().toISOString(),\n          stack: new Error().stack\n        });\n      }\n      return originalFetch.apply(this, args);\n    };\n    \n    // Monitor XMLHttpRequest\n    XMLHttpRequest.prototype.open = function(method, url, ...args) {\n      if (typeof url === 'string' && url.includes('chrome-extension://')) {\n        console.warn('Chrome extension XMLHttpRequest detected:', {\n          url,\n          method,\n          timestamp: new Date().toISOString(),\n          stack: new Error().stack\n        });\n      }\n      return originalXHROpen.apply(this, [method, url, ...args]);\n    };\n    \n    // Cleanup function\n    return () => {\n      window.fetch = originalFetch;\n      XMLHttpRequest.prototype.open = originalXHROpen;\n    };\n  }, []);\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  // Add handlers to detect and potentially mitigate Chrome extension interference\n  const handleFocus = (e) => {\n    // Log focus events to help debug extension issues\n    console.log('TextArea focused', {\n      target: e.target,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent\n    });\n  };\n\n  const handleBlur = (e) => {\n    // Log blur events to help debug extension issues\n    console.log('TextArea blurred', {\n      target: e.target,\n      timestamp: new Date().toISOString()\n    });\n  };\n\n  const handleInput = (e) => {\n    // Prevent potential extension interference by ensuring proper event handling\n    setUserInput(e.target.value);\n    adjustTextareaHeight();\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!userInput.trim() || isLoading) return;\n\n    // If no current session, create a default one\n    let sessionId = currentSessionId;\n    let sessionName = currentSessionData?.session_name || 'Default';\n    \n    // Check if we're in new chat mode (no existing chats)\n    const isNewChatMode = currentSessionData?.isNewChatMode && currentSessionData?.shouldCreateSessionOnFirstMessage;\n    \n    if (!sessionId && !isNewChatMode) {\n      try {\n        console.log('No active session, creating unique session...');\n        setIsCreatingNewSession(true);\n        \n        // Generate unique session name based on the first message\n        const question = userInput.trim();\n        const uniqueSessionName = generateSessionName(question, '');\n        console.log('Generated unique session name:', uniqueSessionName);\n        \n        const createResponse = await chatHistoryAPI.createChatSession(uniqueSessionName);\n        if (createResponse.success) {\n          sessionId = createResponse.session.id;\n          sessionName = createResponse.session.session_name;\n          console.log('Unique session created:', sessionId, 'with name:', sessionName);\n          \n          // Update the parent component with the new session\n          if (onSessionChange) {\n            onSessionChange({\n              session_id: sessionId,\n              session_name: sessionName,\n              created_at: createResponse.session.created_at,\n              message_count: 0\n            });\n          }\n        } else {\n          console.error('Failed to create unique session:', createResponse.message);\n          toast.error(`Failed to create chat session: ${createResponse.message}`);\n          setIsCreatingNewSession(false);\n          return;\n        }\n      } catch (error) {\n        console.error('Error creating unique session:', error);\n        toast.error(`Failed to create chat session: ${error.message || 'Unknown error'}`);\n        setIsCreatingNewSession(false);\n        return;\n      }\n    }\n    \n    // If in new chat mode, create session now (first message)\n    if (isNewChatMode) {\n      try {\n        console.log('New chat mode: creating session on first message...');\n        setIsCreatingNewSession(true);\n        \n        // Generate unique session name based on the first message\n        const question = userInput.trim();\n        const uniqueSessionName = generateSessionName(question, '');\n        console.log('Generated unique session name:', uniqueSessionName);\n        \n        const createResponse = await chatHistoryAPI.createChatSession(uniqueSessionName);\n        if (createResponse.success) {\n          sessionId = createResponse.session.id;\n          sessionName = createResponse.session.session_name;\n          console.log('Session created on first message:', sessionId, 'with name:', sessionName);\n          \n          // Update the parent component with the new session\n          if (onSessionChange) {\n            onSessionChange({\n              session_id: sessionId,\n              session_name: sessionName,\n              created_at: createResponse.session.created_at,\n              message_count: 0\n            });\n          }\n        } else {\n          console.error('Failed to create session on first message:', createResponse.message);\n          toast.error(`Failed to create chat session: ${createResponse.message}`);\n          setIsCreatingNewSession(false);\n          return;\n        }\n      } catch (error) {\n        console.error('Error creating session on first message:', error);\n        toast.error(`Failed to create chat session: ${error.message || 'Unknown error'}`);\n        setIsCreatingNewSession(false);\n        return;\n      }\n    }\n\n    const question = userInput.trim();\n    setUserInput('');\n    setIsLoading(true);\n\n    // Add user message to local state\n    const userMessage = {\n      q: question,\n      a: '',\n      timestamp: new Date().toLocaleString(),\n      type: 'user'\n    };\n\n    console.log('Adding user message to state:', userMessage);\n    setMessages(prev => {\n      const newMessages = [...prev, userMessage];\n      console.log('Updated messages array:', newMessages);\n      return newMessages;\n    });\n\n    try {\n      console.log('Sending message to API:', {\n        question,\n        knowledgeBase: knowledgeBase ? 'Present' : 'Empty',\n        sessionId: currentSessionId,\n        currentSessionName: currentSessionData?.session_name\n      });\n      \n      // Get AI response from backend\n      const response = await chatAPI.sendMessage(\n        question, \n        knowledgeBase, \n        messages, \n        sessionName\n      );\n      \n      if (response.success) {\n        // Add AI response as a separate message\n        const aiMessage = {\n          q: '',\n          a: response.response,\n          timestamp: response.timestamp,\n          type: 'ai',\n          tables: response.tables || [],\n          plot: response.plot,\n          plot_code: response.plot_code,\n          sources: response.sources\n        };\n\n        // Debug logging\n        console.log('🤖 AI Response received:', {\n          responseLength: response.response?.length,\n          tablesCount: response.tables?.length || 0,\n          hasPlot: !!response.plot,\n          plotLength: response.plot?.length || 0,\n          hasPlotCode: !!response.plot_code,\n          plotCodeLength: response.plot_code?.length || 0,\n          sourcesCount: response.sources?.length || 0\n        });\n        \n        // Additional plot debugging\n        if (response.plot) {\n          console.log('🎨 Plot data received:', {\n            plotDataLength: response.plot.length,\n            plotDataPreview: response.plot.substring(0, 100) + '...'\n          });\n        }\n        \n        if (response.plot_code) {\n          console.log('📝 Plot code received:', {\n            plotCodeLength: response.plot_code.length,\n            plotCodePreview: response.plot_code.substring(0, 200) + '...'\n          });\n        }\n\n        setMessages(prev => [...prev, aiMessage]);\n\n        // Session already has unique name, no need to rename\n\n      } else {\n        toast.error('Failed to get response from AI');\n      }\n\n    } catch (error) {\n      toast.error('Failed to get response. Please try again.');\n      console.error('Error:', error);\n    } finally {\n      setIsLoading(false);\n      setIsCreatingNewSession(false);\n    }\n  };\n\n  const handleFileUpload = async (files) => {\n    setIsUploading(true);\n    try {\n      const response = await fileAPI.upload(files);\n      if (response.success) {\n        setKnowledgeBase(response.knowledge_base);\n        toast.success(response.message);\n        setShowUploadInterface(false);\n      } else {\n        toast.error('Failed to process files');\n      }\n    } catch (error) {\n      console.error('File upload error:', error);\n      toast.error('Failed to upload files. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const clearKnowledgeBase = () => {\n    setKnowledgeBase('');\n    toast.success('Knowledge base cleared');\n  };\n\n  // Test plot functionality\n  const testPlotGeneration = async () => {\n    try {\n      console.log('🧪 Testing plot generation...');\n      \n      // First test the simple plot endpoint\n      const testResponse = await fetch('http://localhost:5000/api/test-plot');\n      const testData = await testResponse.json();\n      \n      if (testData.success) {\n        console.log('✅ Simple plot test successful:', testData);\n        \n        // Add test plot to messages\n        const testPlotMessage = {\n          q: 'Test Plot Generation',\n          a: 'This is a test plot to verify the plot generation functionality is working correctly.',\n          timestamp: new Date().toLocaleString(),\n          type: 'ai',\n          plot: testData.plot,\n          plot_code: 'Test plot code'\n        };\n        \n        setMessages(prev => [...prev, testPlotMessage]);\n        toast.success('Simple plot test successful!');\n      } else {\n        console.error('❌ Simple plot test failed:', testData);\n        toast.error('Simple plot test failed');\n      }\n      \n      // Then test the full chat with plot generation\n      const testQuestion = \"Create a bar chart showing sales data for Q1, Q2, Q3, Q4 with values 12000, 15000, 18000, 22000\";\n      \n      const response = await chatAPI.sendMessage(\n        testQuestion, \n        knowledgeBase, \n        messages, \n        'Test Session'\n      );\n      \n      console.log('🧪 Full chat test response:', response);\n      \n      if (response.success) {\n        console.log('🧪 Plot data received:', {\n          hasPlot: !!response.plot,\n          plotLength: response.plot?.length || 0,\n          hasPlotCode: !!response.plot_code,\n          plotCodeLength: response.plot_code?.length || 0\n        });\n        \n        // Add test message to display\n        const testMessage = {\n          q: testQuestion,\n          a: response.response,\n          timestamp: response.timestamp,\n          type: 'ai',\n          tables: response.tables || [],\n          plot: response.plot,\n          plot_code: response.plot_code,\n          sources: response.sources\n        };\n        \n        setMessages(prev => [...prev, testMessage]);\n        toast.success('Full plot test completed! Check console for details.');\n      } else {\n        toast.error('Full plot test failed');\n      }\n    } catch (error) {\n      console.error('Plot test error:', error);\n      toast.error('Plot test failed');\n    }\n  };\n\n  // This line is no longer needed as we're using the messages state directly\n\n  return (\n    <ChatContainer>\n      {knowledgeBase && (\n        <KnowledgeBaseStatus>\n          <StatusHeader>\n            <StatusTitle>📚 Knowledge Base Active</StatusTitle>\n            {/* <div style={{ display: 'flex', gap: '8px' }}>\n              <TestPlotButton onClick={testPlotGeneration}>\n                🧪 Test Plot\n              </TestPlotButton>\n              <ClearButton onClick={clearKnowledgeBase}>\n                Clear\n              </ClearButton>\n            </div> */}\n          </StatusHeader>\n          <StatusText>\n            Knowledge base contains {knowledgeBase.length} characters\n          </StatusText>\n        </KnowledgeBaseStatus>\n      )}\n\n      <ChatSection>\n        <MessagesContainer>\n          {loadingMessages ? (\n            <EmptyState>\n              <div className=\"spinner\" style={{ width: '32px', height: '32px', margin: '0 auto 16px' }}></div>\n              <p>Loading messages...</p>\n            </EmptyState>\n          ) : messages.length === 0 ? (\n            <EmptyState>\n              <h3>How can I help you today? 🤖</h3>\n              <p>\n                {knowledgeBase \n                  ? \"I have access to your uploaded documents. Ask me anything!\"\n                  : \"I'm here to help! Ask me anything or upload documents to get started.\"\n                }\n              </p>\n            </EmptyState>\n          ) : (\n            <>\n              {messages.map((message, index) => (\n                <ChatMessage key={index} message={message} />\n              ))}\n            </>\n          )}\n          \n          {isLoading && (\n            <LoadingContainer>\n              <div className=\"spinner\" style={{ width: '32px', height: '32px' }}></div>\n              <p>Generating response...</p>\n            </LoadingContainer>\n          )}\n          \n          <div ref={messagesEndRef} />\n        </MessagesContainer>\n\n        <InputSection>\n          <InputWrapper>\n            {showUploadInterface && (\n              <UploadInterface>\n                <UploadHeader>\n                  <UploadTitle>📁 Upload Documents</UploadTitle>\n                  <CloseButton onClick={() => setShowUploadInterface(false)}>\n                    <X size={20} />\n                  </CloseButton>\n                </UploadHeader>\n                <FileUpload onFileUpload={handleFileUpload} isUploading={isUploading} />\n              </UploadInterface>\n            )}\n            \n            <InputForm onSubmit={handleSubmit}>\n              <UploadButton\n                type=\"button\"\n                onClick={() => setShowUploadInterface(!showUploadInterface)}\n                disabled={isLoading}\n                title=\"Upload documents\"\n              >\n                <Paperclip size={20} />\n              </UploadButton>\n              \n              <TextArea\n                ref={textareaRef}\n                value={userInput}\n                onChange={handleInput}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                onKeyDown={handleKeyDown}\n                placeholder={\n                  knowledgeBase \n                    ? \"Message TONIC AI...\"\n                    : \"Message TONIC AI...\"\n                }\n                disabled={isLoading}\n                // Add attributes to help prevent extension interference\n                autoComplete=\"off\"\n                spellCheck=\"false\"\n                data-gramm=\"false\"\n                data-gramm_editor=\"false\"\n                data-enable-grammarly=\"false\"\n              />\n              <SendButton type=\"submit\" disabled={isLoading || !userInput.trim()}>\n                {isLoading ? (\n                  <div className=\"spinner\" style={{ width: '20px', height: '20px' }}></div>\n                ) : (\n                  <Send size={20} />\n                )}\n                Send\n              </SendButton>\n            </InputForm>\n          </InputWrapper>\n        </InputSection>\n      </ChatSection>\n    </ChatContainer>\n  );\n}\n\nexport default ChatInterface;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,IAAI,EAAEC,SAAS,EAAEC,CAAC,QAAQ,cAAc;AACjD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,KAAK,MAAM,iBAAiB;AACnC,SAASC,OAAO,EAAEC,OAAO,EAAEC,cAAc,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnE,MAAMC,aAAa,GAAGT,MAAM,CAACU,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA,MAAMC,WAAW,GAAGX,MAAM,CAACU,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAME,iBAAiB,GAAGZ,MAAM,CAACU,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMG,YAAY,GAAGb,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,SAAS,GAAGd,MAAM,CAACe,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,QAAQ,GAAGhB,MAAM,CAACiB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,UAAU,GAAGlB,MAAM,CAACmB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,YAAY,GAAGpB,MAAM,CAACmB,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAME,eAAe,GAAGrB,MAAM,CAACU,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMY,YAAY,GAAGtB,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMa,WAAW,GAAGvB,MAAM,CAACwB,EAAE;AAC7B;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,WAAW,GAAGzB,MAAM,CAACmB,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,YAAY,GAAG1B,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMiB,UAAU,GAAG3B,MAAM,CAACU,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMkB,gBAAgB,GAAG5B,MAAM,CAACU,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMmB,mBAAmB,GAAG7B,MAAM,CAACU,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMoB,YAAY,GAAG9B,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMqB,WAAW,GAAG/B,MAAM,CAACwB,EAAE;AAC7B;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMQ,WAAW,GAAGhC,MAAM,CAACmB,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMc,UAAU,GAAGjC,MAAM,CAACkC,CAAC;AAC3B;AACA;AACA;AACA,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}