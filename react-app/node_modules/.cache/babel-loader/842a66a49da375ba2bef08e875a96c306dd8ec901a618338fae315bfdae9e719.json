{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/Personal/my-project/react-app/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for persistent login on mount\n  useEffect(() => {\n    const checkPersistentLogin = () => {\n      const authToken = localStorage.getItem('authToken');\n      const username = localStorage.getItem('username');\n      const loginTime = localStorage.getItem('loginTime');\n      if (authToken && username && loginTime) {\n        const loginTimestamp = parseFloat(loginTime);\n        const currentTime = Date.now() / 1000;\n        const expiryTime = 7 * 24 * 60 * 60; // 7 days in seconds\n\n        if (currentTime - loginTimestamp < expiryTime) {\n          setIsAuthenticated(true);\n          setUser(username);\n        } else {\n          // Token expired, clear storage\n          clearPersistentLogin();\n        }\n      }\n      setLoading(false);\n    };\n    checkPersistentLogin();\n  }, []);\n  const login = async (username, password, rememberMe = false) => {\n    try {\n      // Mock authentication - replace with actual API call\n      const users = {\n        'admin@123': 'admin@123',\n        'demo': 'demo123'\n      };\n      if (users[username] && users[username] === password) {\n        setIsAuthenticated(true);\n        setUser(username);\n        if (rememberMe) {\n          setPersistentLogin(username);\n          toast.success('Login successful - You\\'ll stay logged in even after page refresh!');\n        } else {\n          toast.success('Login successful!');\n        }\n        return true;\n      } else {\n        toast.error('Invalid username or password');\n        return false;\n      }\n    } catch (error) {\n      toast.error('Login failed. Please try again.');\n      return false;\n    }\n  };\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    clearPersistentLogin();\n    toast.success('Logged out successfully!');\n  };\n  const setPersistentLogin = username => {\n    const loginTime = Date.now() / 1000;\n    const authToken = `tonic_auth_${username}_${loginTime}_2024`;\n    localStorage.setItem('authToken', authToken);\n    localStorage.setItem('username', username);\n    localStorage.setItem('loginTime', loginTime.toString());\n  };\n  const clearPersistentLogin = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('username');\n    localStorage.removeItem('loginTime');\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout,\n    setPersistentLogin,\n    clearPersistentLogin\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkPersistentLogin","authToken","localStorage","getItem","username","loginTime","loginTimestamp","parseFloat","currentTime","Date","now","expiryTime","clearPersistentLogin","login","password","rememberMe","users","setPersistentLogin","success","error","logout","setItem","toString","removeItem","value","style","display","justifyContent","alignItems","height","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","$RefreshReg$"],"sources":["/home/shubham/Documents/Personal/my-project/react-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for persistent login on mount\n  useEffect(() => {\n    const checkPersistentLogin = () => {\n      const authToken = localStorage.getItem('authToken');\n      const username = localStorage.getItem('username');\n      const loginTime = localStorage.getItem('loginTime');\n\n      if (authToken && username && loginTime) {\n        const loginTimestamp = parseFloat(loginTime);\n        const currentTime = Date.now() / 1000;\n        const expiryTime = 7 * 24 * 60 * 60; // 7 days in seconds\n\n        if (currentTime - loginTimestamp < expiryTime) {\n          setIsAuthenticated(true);\n          setUser(username);\n        } else {\n          // Token expired, clear storage\n          clearPersistentLogin();\n        }\n      }\n      setLoading(false);\n    };\n\n    checkPersistentLogin();\n  }, []);\n\n  const login = async (username, password, rememberMe = false) => {\n    try {\n      // Mock authentication - replace with actual API call\n      const users = {\n        'admin@123': 'admin@123',\n        'demo': 'demo123'\n      };\n\n      if (users[username] && users[username] === password) {\n        setIsAuthenticated(true);\n        setUser(username);\n\n        if (rememberMe) {\n          setPersistentLogin(username);\n          toast.success('Login successful - You\\'ll stay logged in even after page refresh!');\n        } else {\n          toast.success('Login successful!');\n        }\n\n        return true;\n      } else {\n        toast.error('Invalid username or password');\n        return false;\n      }\n    } catch (error) {\n      toast.error('Login failed. Please try again.');\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    clearPersistentLogin();\n    toast.success('Logged out successfully!');\n  };\n\n  const setPersistentLogin = (username) => {\n    const loginTime = Date.now() / 1000;\n    const authToken = `tonic_auth_${username}_${loginTime}_2024`;\n    \n    localStorage.setItem('authToken', authToken);\n    localStorage.setItem('username', username);\n    localStorage.setItem('loginTime', loginTime.toString());\n  };\n\n  const clearPersistentLogin = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('username');\n    localStorage.removeItem('loginTime');\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout,\n    setPersistentLogin,\n    clearPersistentLogin\n  };\n\n  if (loading) {\n    return <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n      <div className=\"spinner\"></div>\n    </div>;\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}