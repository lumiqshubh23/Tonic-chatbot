{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/Personal/my-project/react-app/src/contexts/AuthContext.js\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for persistent login on mount\n  useEffect(() => {\n    const checkPersistentLogin = () => {\n      const authToken = localStorage.getItem('authToken');\n      const username = localStorage.getItem('username');\n      if (authToken && username) {\n        // For JWT tokens, we could validate them here\n        // For now, we'll just check if they exist\n        setIsAuthenticated(true);\n        setUser(username);\n      }\n      setLoading(false);\n    };\n    checkPersistentLogin();\n  }, []);\n  const login = async (username, password, rememberMe = false) => {\n    try {\n      const response = await authAPI.login(username, password, rememberMe);\n      if (response.success) {\n        var _response$user, _response$user2;\n        setIsAuthenticated(true);\n        setUser(((_response$user = response.user) === null || _response$user === void 0 ? void 0 : _response$user.username) || response.username);\n\n        // Store JWT token and user info\n        localStorage.setItem('authToken', response.token);\n        localStorage.setItem('username', ((_response$user2 = response.user) === null || _response$user2 === void 0 ? void 0 : _response$user2.username) || response.username);\n        if (rememberMe) {\n          localStorage.setItem('loginTime', (Date.now() / 1000).toString());\n          toast.success('Login successful - You\\'ll stay logged in even after page refresh!');\n        } else {\n          toast.success('Login successful!');\n        }\n        return true;\n      } else {\n        toast.error(response.message || 'Invalid username or password');\n        return false;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      toast.error('Login failed. Please try again.');\n      return false;\n    }\n  };\n  const logout = async () => {\n    try {\n      // Show loading state\n      toast.loading('Logging out...', {\n        id: 'logout'\n      });\n      await authAPI.logout();\n\n      // Clear all local data\n      setIsAuthenticated(false);\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      localStorage.removeItem('loginTime');\n\n      // Clear any other stored data\n      sessionStorage.clear();\n      toast.success('Logged out successfully!', {\n        id: 'logout'\n      });\n\n      // Redirect to login page\n      window.location.href = '/login';\n    } catch (error) {\n      console.error('Logout error:', error);\n\n      // Even if backend logout fails, clear local data\n      setIsAuthenticated(false);\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      localStorage.removeItem('loginTime');\n      sessionStorage.clear();\n      toast.success('Logged out successfully!', {\n        id: 'logout'\n      });\n      window.location.href = '/login';\n    }\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkPersistentLogin","authToken","localStorage","getItem","username","login","password","rememberMe","response","success","_response$user","_response$user2","setItem","token","Date","now","toString","error","message","console","logout","id","removeItem","sessionStorage","clear","window","location","href","value","style","display","justifyContent","alignItems","height","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider"],"sources":["/home/shubham/Documents/Personal/my-project/react-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for persistent login on mount\n  useEffect(() => {\n    const checkPersistentLogin = () => {\n      const authToken = localStorage.getItem('authToken');\n      const username = localStorage.getItem('username');\n\n      if (authToken && username) {\n        // For JWT tokens, we could validate them here\n        // For now, we'll just check if they exist\n        setIsAuthenticated(true);\n        setUser(username);\n      }\n      setLoading(false);\n    };\n\n    checkPersistentLogin();\n  }, []);\n\n  const login = async (username, password, rememberMe = false) => {\n    try {\n      const response = await authAPI.login(username, password, rememberMe);\n      \n      if (response.success) {\n        setIsAuthenticated(true);\n        setUser(response.user?.username || response.username);\n\n        // Store JWT token and user info\n        localStorage.setItem('authToken', response.token);\n        localStorage.setItem('username', response.user?.username || response.username);\n        \n        if (rememberMe) {\n          localStorage.setItem('loginTime', (Date.now() / 1000).toString());\n          toast.success('Login successful - You\\'ll stay logged in even after page refresh!');\n        } else {\n          toast.success('Login successful!');\n        }\n\n        return true;\n      } else {\n        toast.error(response.message || 'Invalid username or password');\n        return false;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      toast.error('Login failed. Please try again.');\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Show loading state\n      toast.loading('Logging out...', { id: 'logout' });\n      \n      await authAPI.logout();\n      \n      // Clear all local data\n      setIsAuthenticated(false);\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      localStorage.removeItem('loginTime');\n      \n      // Clear any other stored data\n      sessionStorage.clear();\n      \n      toast.success('Logged out successfully!', { id: 'logout' });\n      \n      // Redirect to login page\n      window.location.href = '/login';\n    } catch (error) {\n      console.error('Logout error:', error);\n      \n      // Even if backend logout fails, clear local data\n      setIsAuthenticated(false);\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      localStorage.removeItem('loginTime');\n      sessionStorage.clear();\n      \n      toast.success('Logged out successfully!', { id: 'logout' });\n      window.location.href = '/login';\n    }\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout\n  };\n\n  if (loading) {\n    return <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n      <div className=\"spinner\"></div>\n    </div>;\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}