{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/Personal/my-project/react-app/src/components/ChartRenderer.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale } from 'chart.js';\nimport { Line, Bar, Pie, Doughnut, Scatter, Radar } from 'react-chartjs-2';\nimport styled from 'styled-components';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale);\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 12px;\n  padding: 24px;\n  margin: 16px 0;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border: 1px solid #e2e8f0;\n`;\nconst ChartTitle = styled.h4`\n  color: #2d3748;\n  margin: 0 0 16px 0;\n  font-weight: 600;\n  font-size: 16px;\n  text-align: center;\n`;\nconst ErrorMessage = styled.div`\n  color: #e53e3e;\n  text-align: center;\n  padding: 20px;\n  background: #fed7d7;\n  border-radius: 8px;\n  border: 1px solid #feb2b2;\n`;\nconst LoadingMessage = styled.div`\n  color: #718096;\n  text-align: center;\n  padding: 20px;\n  background: #f7fafc;\n  border-radius: 8px;\n  border: 1px dashed #e2e8f0;\n`;\nconst DebugInfo = styled.div`\n  background: #f7fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 12px;\n  margin: 12px 0;\n  font-family: monospace;\n  font-size: 12px;\n  color: #4a5568;\n`;\nconst ChartRenderer = ({\n  plotCode,\n  title = \"Data Visualization\"\n}) => {\n  const [chartData, setChartData] = useState(null);\n  const [chartType, setChartType] = useState('line');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [debugInfo, setDebugInfo] = useState('');\n  useEffect(() => {\n    if (!plotCode) {\n      setError(\"No plot code provided\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      console.log('🎨 Parsing plot code:', plotCode);\n      const parsedData = parseMatplotlibCode(plotCode);\n      console.log('📊 Parsed data:', parsedData);\n      setChartData(parsedData.data);\n      setChartType(parsedData.type);\n      setDebugInfo(`Chart type: ${parsedData.type}, Labels: ${parsedData.data.labels.length}, Datasets: ${parsedData.data.datasets.length}`);\n      setError(null);\n    } catch (err) {\n      console.error('Chart parsing error:', err);\n      setError(`Failed to parse chart data: ${err.message}`);\n      setDebugInfo(`Error: ${err.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [plotCode]);\n  const parseMatplotlibCode = code => {\n    console.log('🔍 Starting to parse matplotlib code...');\n    let data = {\n      labels: [],\n      datasets: []\n    };\n    let chartType = 'line';\n\n    // Detect chart type\n    if (code.includes('plt.bar(')) {\n      chartType = 'bar';\n      console.log('📊 Detected bar chart');\n    } else if (code.includes('plt.pie(')) {\n      chartType = 'pie';\n      console.log('🥧 Detected pie chart');\n    } else if (code.includes('plt.scatter(')) {\n      chartType = 'scatter';\n      console.log('🔵 Detected scatter plot');\n    } else {\n      console.log('📈 Defaulting to line chart');\n    }\n\n    // Try multiple patterns to extract data\n    let extractedData = null;\n\n    // Pattern 1: Direct array assignments\n    const xMatch = code.match(/x\\s*=\\s*\\[(.*?)\\]/);\n    const yMatch = code.match(/y\\s*=\\s*\\[(.*?)\\]/);\n    if (xMatch && yMatch) {\n      console.log('✅ Found x and y arrays');\n      const xValues = xMatch[1].split(',').map(val => val.trim().replace(/['\"]/g, ''));\n      const yValues = yMatch[1].split(',').map(val => parseFloat(val.trim()) || 0);\n      data.labels = xValues;\n      data.datasets.push({\n        label: 'Data',\n        data: yValues,\n        backgroundColor: 'rgba(255, 107, 53, 0.2)',\n        borderColor: 'rgba(255, 107, 53, 1)',\n        borderWidth: 2,\n        pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n        pointBorderColor: '#fff',\n        pointBorderWidth: 2,\n        pointRadius: 6,\n        pointHoverRadius: 8,\n        fill: chartType === 'line'\n      });\n      extractedData = true;\n    }\n\n    // Pattern 2: plt.plot/bar with arrays\n    if (!extractedData) {\n      const plotMatch = code.match(/plt\\.(?:plot|bar)\\(.*?\\[(.*?)\\].*?\\)/);\n      if (plotMatch) {\n        console.log('✅ Found plt.plot/bar with array');\n        const values = plotMatch[1].split(',').map(val => parseFloat(val.trim()) || 0);\n        data.labels = values.map((_, index) => `Point ${index + 1}`);\n        data.datasets.push({\n          label: 'Data',\n          data: values,\n          backgroundColor: 'rgba(255, 107, 53, 0.2)',\n          borderColor: 'rgba(255, 107, 53, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n          pointBorderColor: '#fff',\n          pointBorderWidth: 2,\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          fill: chartType === 'line'\n        });\n        extractedData = true;\n      }\n    }\n\n    // Pattern 3: Look for data in the response text\n    if (!extractedData) {\n      console.log('🔍 Looking for data patterns in code...');\n\n      // Try to find any array-like patterns\n      const arrayMatches = code.match(/\\[([\\d\\s,\\.]+)\\]/g);\n      if (arrayMatches && arrayMatches.length > 0) {\n        console.log('✅ Found array patterns:', arrayMatches);\n\n        // Use the first array as data\n        const firstArray = arrayMatches[0];\n        const values = firstArray.replace(/[\\[\\]]/g, '').split(',').map(val => parseFloat(val.trim()) || 0);\n        data.labels = values.map((_, index) => `Point ${index + 1}`);\n        data.datasets.push({\n          label: 'Data',\n          data: values,\n          backgroundColor: 'rgba(255, 107, 53, 0.2)',\n          borderColor: 'rgba(255, 107, 53, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n          pointBorderColor: '#fff',\n          pointBorderWidth: 2,\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          fill: chartType === 'line'\n        });\n        extractedData = true;\n      }\n    }\n\n    // If still no data, create sample data based on common patterns\n    if (!extractedData) {\n      console.log('⚠️ No data extracted, creating sample data');\n\n      // Try to extract labels from the code\n      const labelMatches = code.match(/['\"]([^'\"]+)['\"]/g);\n      if (labelMatches && labelMatches.length > 0) {\n        data.labels = labelMatches.slice(0, 6).map(label => label.replace(/['\"]/g, ''));\n      } else {\n        data.labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n      }\n      data.datasets.push({\n        label: 'Sample Data',\n        data: [12, 19, 3, 5, 2, 3],\n        backgroundColor: 'rgba(255, 107, 53, 0.2)',\n        borderColor: 'rgba(255, 107, 53, 1)',\n        borderWidth: 2,\n        pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n        pointBorderColor: '#fff',\n        pointBorderWidth: 2,\n        pointRadius: 6,\n        pointHoverRadius: 8,\n        fill: chartType === 'line'\n      });\n    }\n    console.log('📊 Final parsed data:', data);\n    return {\n      data,\n      type: chartType\n    };\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: title\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  const renderChart = () => {\n    if (!chartData) return null;\n    const commonProps = {\n      data: chartData,\n      options: chartOptions,\n      height: 400\n    };\n    switch (chartType) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(Bar, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 16\n        }, this);\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(Pie, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 16\n        }, this);\n      case 'doughnut':\n        return /*#__PURE__*/_jsxDEV(Doughnut, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 16\n        }, this);\n      case 'scatter':\n        return /*#__PURE__*/_jsxDEV(Scatter, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 16\n        }, this);\n      case 'radar':\n        return /*#__PURE__*/_jsxDEV(Radar, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Line, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(ChartContainer, {\n      children: /*#__PURE__*/_jsxDEV(LoadingMessage, {\n        children: \"Generating chart...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ChartContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Chart Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), \" \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DebugInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Debug Info:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), \" \", debugInfo, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Plot Code:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), \" \", plotCode === null || plotCode === void 0 ? void 0 : plotCode.substring(0, 200), \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '400px',\n        position: 'relative'\n      },\n      children: renderChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DebugInfo, {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Debug Info:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), \" \", debugInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n};\nexport default ChartRenderer;","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","ArcElement","RadialLinearScale","Line","Bar","Pie","Doughnut","Scatter","Radar","styled","jsxDEV","_jsxDEV","register","ChartContainer","div","ChartTitle","h4","ErrorMessage","LoadingMessage","DebugInfo","ChartRenderer","plotCode","title","chartData","setChartData","chartType","setChartType","error","setError","isLoading","setIsLoading","debugInfo","setDebugInfo","console","log","parsedData","parseMatplotlibCode","data","type","labels","length","datasets","err","message","code","includes","extractedData","xMatch","match","yMatch","xValues","split","map","val","trim","replace","yValues","parseFloat","push","label","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHoverRadius","fill","plotMatch","values","_","index","arrayMatches","firstArray","labelMatches","slice","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","display","text","scales","y","beginAtZero","renderChart","commonProps","options","height","fileName","_jsxFileName","lineNumber","columnNumber","children","substring","style"],"sources":["/home/shubham/Documents/Personal/my-project/react-app/src/components/ChartRenderer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  RadialLinearScale,\n} from 'chart.js';\nimport { Line, Bar, Pie, Doughnut, Scatter, Radar } from 'react-chartjs-2';\nimport styled from 'styled-components';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  RadialLinearScale\n);\n\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 12px;\n  padding: 24px;\n  margin: 16px 0;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border: 1px solid #e2e8f0;\n`;\n\nconst ChartTitle = styled.h4`\n  color: #2d3748;\n  margin: 0 0 16px 0;\n  font-weight: 600;\n  font-size: 16px;\n  text-align: center;\n`;\n\nconst ErrorMessage = styled.div`\n  color: #e53e3e;\n  text-align: center;\n  padding: 20px;\n  background: #fed7d7;\n  border-radius: 8px;\n  border: 1px solid #feb2b2;\n`;\n\nconst LoadingMessage = styled.div`\n  color: #718096;\n  text-align: center;\n  padding: 20px;\n  background: #f7fafc;\n  border-radius: 8px;\n  border: 1px dashed #e2e8f0;\n`;\n\nconst DebugInfo = styled.div`\n  background: #f7fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 12px;\n  margin: 12px 0;\n  font-family: monospace;\n  font-size: 12px;\n  color: #4a5568;\n`;\n\nconst ChartRenderer = ({ plotCode, title = \"Data Visualization\" }) => {\n  const [chartData, setChartData] = useState(null);\n  const [chartType, setChartType] = useState('line');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [debugInfo, setDebugInfo] = useState('');\n\n  useEffect(() => {\n    if (!plotCode) {\n      setError(\"No plot code provided\");\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      console.log('🎨 Parsing plot code:', plotCode);\n      const parsedData = parseMatplotlibCode(plotCode);\n      console.log('📊 Parsed data:', parsedData);\n      setChartData(parsedData.data);\n      setChartType(parsedData.type);\n      setDebugInfo(`Chart type: ${parsedData.type}, Labels: ${parsedData.data.labels.length}, Datasets: ${parsedData.data.datasets.length}`);\n      setError(null);\n    } catch (err) {\n      console.error('Chart parsing error:', err);\n      setError(`Failed to parse chart data: ${err.message}`);\n      setDebugInfo(`Error: ${err.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [plotCode]);\n\n  const parseMatplotlibCode = (code) => {\n    console.log('🔍 Starting to parse matplotlib code...');\n    \n    let data = {\n      labels: [],\n      datasets: []\n    };\n    let chartType = 'line';\n\n    // Detect chart type\n    if (code.includes('plt.bar(')) {\n      chartType = 'bar';\n      console.log('📊 Detected bar chart');\n    } else if (code.includes('plt.pie(')) {\n      chartType = 'pie';\n      console.log('🥧 Detected pie chart');\n    } else if (code.includes('plt.scatter(')) {\n      chartType = 'scatter';\n      console.log('🔵 Detected scatter plot');\n    } else {\n      console.log('📈 Defaulting to line chart');\n    }\n\n    // Try multiple patterns to extract data\n    let extractedData = null;\n\n    // Pattern 1: Direct array assignments\n    const xMatch = code.match(/x\\s*=\\s*\\[(.*?)\\]/);\n    const yMatch = code.match(/y\\s*=\\s*\\[(.*?)\\]/);\n    \n    if (xMatch && yMatch) {\n      console.log('✅ Found x and y arrays');\n      const xValues = xMatch[1].split(',').map(val => val.trim().replace(/['\"]/g, ''));\n      const yValues = yMatch[1].split(',').map(val => parseFloat(val.trim()) || 0);\n      \n      data.labels = xValues;\n      data.datasets.push({\n        label: 'Data',\n        data: yValues,\n        backgroundColor: 'rgba(255, 107, 53, 0.2)',\n        borderColor: 'rgba(255, 107, 53, 1)',\n        borderWidth: 2,\n        pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n        pointBorderColor: '#fff',\n        pointBorderWidth: 2,\n        pointRadius: 6,\n        pointHoverRadius: 8,\n        fill: chartType === 'line',\n      });\n      extractedData = true;\n    }\n\n    // Pattern 2: plt.plot/bar with arrays\n    if (!extractedData) {\n      const plotMatch = code.match(/plt\\.(?:plot|bar)\\(.*?\\[(.*?)\\].*?\\)/);\n      if (plotMatch) {\n        console.log('✅ Found plt.plot/bar with array');\n        const values = plotMatch[1].split(',').map(val => parseFloat(val.trim()) || 0);\n        \n        data.labels = values.map((_, index) => `Point ${index + 1}`);\n        data.datasets.push({\n          label: 'Data',\n          data: values,\n          backgroundColor: 'rgba(255, 107, 53, 0.2)',\n          borderColor: 'rgba(255, 107, 53, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n          pointBorderColor: '#fff',\n          pointBorderWidth: 2,\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          fill: chartType === 'line',\n        });\n        extractedData = true;\n      }\n    }\n\n    // Pattern 3: Look for data in the response text\n    if (!extractedData) {\n      console.log('🔍 Looking for data patterns in code...');\n      \n      // Try to find any array-like patterns\n      const arrayMatches = code.match(/\\[([\\d\\s,\\.]+)\\]/g);\n      if (arrayMatches && arrayMatches.length > 0) {\n        console.log('✅ Found array patterns:', arrayMatches);\n        \n        // Use the first array as data\n        const firstArray = arrayMatches[0];\n        const values = firstArray.replace(/[\\[\\]]/g, '').split(',').map(val => parseFloat(val.trim()) || 0);\n        \n        data.labels = values.map((_, index) => `Point ${index + 1}`);\n        data.datasets.push({\n          label: 'Data',\n          data: values,\n          backgroundColor: 'rgba(255, 107, 53, 0.2)',\n          borderColor: 'rgba(255, 107, 53, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n          pointBorderColor: '#fff',\n          pointBorderWidth: 2,\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          fill: chartType === 'line',\n        });\n        extractedData = true;\n      }\n    }\n\n    // If still no data, create sample data based on common patterns\n    if (!extractedData) {\n      console.log('⚠️ No data extracted, creating sample data');\n      \n      // Try to extract labels from the code\n      const labelMatches = code.match(/['\"]([^'\"]+)['\"]/g);\n      if (labelMatches && labelMatches.length > 0) {\n        data.labels = labelMatches.slice(0, 6).map(label => label.replace(/['\"]/g, ''));\n      } else {\n        data.labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n      }\n      \n      data.datasets.push({\n        label: 'Sample Data',\n        data: [12, 19, 3, 5, 2, 3],\n        backgroundColor: 'rgba(255, 107, 53, 0.2)',\n        borderColor: 'rgba(255, 107, 53, 1)',\n        borderWidth: 2,\n        pointBackgroundColor: 'rgba(255, 107, 53, 1)',\n        pointBorderColor: '#fff',\n        pointBorderWidth: 2,\n        pointRadius: 6,\n        pointHoverRadius: 8,\n        fill: chartType === 'line',\n      });\n    }\n\n    console.log('📊 Final parsed data:', data);\n    return { data, type: chartType };\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: title,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  const renderChart = () => {\n    if (!chartData) return null;\n\n    const commonProps = {\n      data: chartData,\n      options: chartOptions,\n      height: 400,\n    };\n\n    switch (chartType) {\n      case 'bar':\n        return <Bar {...commonProps} />;\n      case 'pie':\n        return <Pie {...commonProps} />;\n      case 'doughnut':\n        return <Doughnut {...commonProps} />;\n      case 'scatter':\n        return <Scatter {...commonProps} />;\n      case 'radar':\n        return <Radar {...commonProps} />;\n      default:\n        return <Line {...commonProps} />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <ChartContainer>\n        <LoadingMessage>Generating chart...</LoadingMessage>\n      </ChartContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <ChartContainer>\n        <ErrorMessage>\n          <strong>Chart Error:</strong> {error}\n        </ErrorMessage>\n        <DebugInfo>\n          <strong>Debug Info:</strong> {debugInfo}\n          <br />\n          <strong>Plot Code:</strong> {plotCode?.substring(0, 200)}...\n        </DebugInfo>\n      </ChartContainer>\n    );\n  }\n\n  return (\n    <ChartContainer>\n      <ChartTitle>{title}</ChartTitle>\n      <div style={{ height: '400px', position: 'relative' }}>\n        {renderChart()}\n      </div>\n      <DebugInfo>\n        <strong>Debug Info:</strong> {debugInfo}\n      </DebugInfo>\n    </ChartContainer>\n  );\n};\n\nexport default ChartRenderer;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UAAU,EACVC,iBAAiB,QACZ,UAAU;AACjB,SAASC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,KAAK,QAAQ,iBAAiB;AAC1E,OAAOC,MAAM,MAAM,mBAAmB;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAnB,OAAO,CAACoB,QAAQ,CACdnB,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UAAU,EACVC,iBACF,CAAC;AAED,MAAMW,cAAc,GAAGJ,MAAM,CAACK,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,UAAU,GAAGN,MAAM,CAACO,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,YAAY,GAAGR,MAAM,CAACK,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,cAAc,GAAGT,MAAM,CAACK,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMK,SAAS,GAAGV,MAAM,CAACK,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMM,aAAa,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK,GAAG;AAAqB,CAAC,KAAK;EACpE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACmC,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,MAAM,CAAC;EAClD,MAAM,CAACqC,KAAK,EAAEC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACyC,SAAS,EAAEC,YAAY,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,IAAI,CAACgC,QAAQ,EAAE;MACbO,QAAQ,CAAC,uBAAuB,CAAC;MACjCE,YAAY,CAAC,KAAK,CAAC;MACnB;IACF;IAEA,IAAI;MACFG,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEb,QAAQ,CAAC;MAC9C,MAAMc,UAAU,GAAGC,mBAAmB,CAACf,QAAQ,CAAC;MAChDY,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,UAAU,CAAC;MAC1CX,YAAY,CAACW,UAAU,CAACE,IAAI,CAAC;MAC7BX,YAAY,CAACS,UAAU,CAACG,IAAI,CAAC;MAC7BN,YAAY,CAAC,eAAeG,UAAU,CAACG,IAAI,aAAaH,UAAU,CAACE,IAAI,CAACE,MAAM,CAACC,MAAM,eAAeL,UAAU,CAACE,IAAI,CAACI,QAAQ,CAACD,MAAM,EAAE,CAAC;MACtIZ,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOc,GAAG,EAAE;MACZT,OAAO,CAACN,KAAK,CAAC,sBAAsB,EAAEe,GAAG,CAAC;MAC1Cd,QAAQ,CAAC,+BAA+Bc,GAAG,CAACC,OAAO,EAAE,CAAC;MACtDX,YAAY,CAAC,UAAUU,GAAG,CAACC,OAAO,EAAE,CAAC;IACvC,CAAC,SAAS;MACRb,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,MAAMe,mBAAmB,GAAIQ,IAAI,IAAK;IACpCX,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IAEtD,IAAIG,IAAI,GAAG;MACTE,MAAM,EAAE,EAAE;MACVE,QAAQ,EAAE;IACZ,CAAC;IACD,IAAIhB,SAAS,GAAG,MAAM;;IAEtB;IACA,IAAImB,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;MAC7BpB,SAAS,GAAG,KAAK;MACjBQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC,MAAM,IAAIU,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;MACpCpB,SAAS,GAAG,KAAK;MACjBQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC,MAAM,IAAIU,IAAI,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;MACxCpB,SAAS,GAAG,SAAS;MACrBQ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C;;IAEA;IACA,IAAIY,aAAa,GAAG,IAAI;;IAExB;IACA,MAAMC,MAAM,GAAGH,IAAI,CAACI,KAAK,CAAC,mBAAmB,CAAC;IAC9C,MAAMC,MAAM,GAAGL,IAAI,CAACI,KAAK,CAAC,mBAAmB,CAAC;IAE9C,IAAID,MAAM,IAAIE,MAAM,EAAE;MACpBhB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,MAAMgB,OAAO,GAAGH,MAAM,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;MAChF,MAAMC,OAAO,GAAGP,MAAM,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAII,UAAU,CAACJ,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MAE5EjB,IAAI,CAACE,MAAM,GAAGW,OAAO;MACrBb,IAAI,CAACI,QAAQ,CAACiB,IAAI,CAAC;QACjBC,KAAK,EAAE,MAAM;QACbtB,IAAI,EAAEmB,OAAO;QACbI,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,uBAAuB;QACpCC,WAAW,EAAE,CAAC;QACdC,oBAAoB,EAAE,uBAAuB;QAC7CC,gBAAgB,EAAE,MAAM;QACxBC,gBAAgB,EAAE,CAAC;QACnBC,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE,CAAC;QACnBC,IAAI,EAAE3C,SAAS,KAAK;MACtB,CAAC,CAAC;MACFqB,aAAa,GAAG,IAAI;IACtB;;IAEA;IACA,IAAI,CAACA,aAAa,EAAE;MAClB,MAAMuB,SAAS,GAAGzB,IAAI,CAACI,KAAK,CAAC,sCAAsC,CAAC;MACpE,IAAIqB,SAAS,EAAE;QACbpC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,MAAMoC,MAAM,GAAGD,SAAS,CAAC,CAAC,CAAC,CAAClB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAII,UAAU,CAACJ,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAE9EjB,IAAI,CAACE,MAAM,GAAG+B,MAAM,CAAClB,GAAG,CAAC,CAACmB,CAAC,EAAEC,KAAK,KAAK,SAASA,KAAK,GAAG,CAAC,EAAE,CAAC;QAC5DnC,IAAI,CAACI,QAAQ,CAACiB,IAAI,CAAC;UACjBC,KAAK,EAAE,MAAM;UACbtB,IAAI,EAAEiC,MAAM;UACZV,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE,CAAC;UACdC,oBAAoB,EAAE,uBAAuB;UAC7CC,gBAAgB,EAAE,MAAM;UACxBC,gBAAgB,EAAE,CAAC;UACnBC,WAAW,EAAE,CAAC;UACdC,gBAAgB,EAAE,CAAC;UACnBC,IAAI,EAAE3C,SAAS,KAAK;QACtB,CAAC,CAAC;QACFqB,aAAa,GAAG,IAAI;MACtB;IACF;;IAEA;IACA,IAAI,CAACA,aAAa,EAAE;MAClBb,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;;MAEtD;MACA,MAAMuC,YAAY,GAAG7B,IAAI,CAACI,KAAK,CAAC,mBAAmB,CAAC;MACpD,IAAIyB,YAAY,IAAIA,YAAY,CAACjC,MAAM,GAAG,CAAC,EAAE;QAC3CP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEuC,YAAY,CAAC;;QAEpD;QACA,MAAMC,UAAU,GAAGD,YAAY,CAAC,CAAC,CAAC;QAClC,MAAMH,MAAM,GAAGI,UAAU,CAACnB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAACJ,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAII,UAAU,CAACJ,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEnGjB,IAAI,CAACE,MAAM,GAAG+B,MAAM,CAAClB,GAAG,CAAC,CAACmB,CAAC,EAAEC,KAAK,KAAK,SAASA,KAAK,GAAG,CAAC,EAAE,CAAC;QAC5DnC,IAAI,CAACI,QAAQ,CAACiB,IAAI,CAAC;UACjBC,KAAK,EAAE,MAAM;UACbtB,IAAI,EAAEiC,MAAM;UACZV,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE,CAAC;UACdC,oBAAoB,EAAE,uBAAuB;UAC7CC,gBAAgB,EAAE,MAAM;UACxBC,gBAAgB,EAAE,CAAC;UACnBC,WAAW,EAAE,CAAC;UACdC,gBAAgB,EAAE,CAAC;UACnBC,IAAI,EAAE3C,SAAS,KAAK;QACtB,CAAC,CAAC;QACFqB,aAAa,GAAG,IAAI;MACtB;IACF;;IAEA;IACA,IAAI,CAACA,aAAa,EAAE;MAClBb,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;;MAEzD;MACA,MAAMyC,YAAY,GAAG/B,IAAI,CAACI,KAAK,CAAC,mBAAmB,CAAC;MACpD,IAAI2B,YAAY,IAAIA,YAAY,CAACnC,MAAM,GAAG,CAAC,EAAE;QAC3CH,IAAI,CAACE,MAAM,GAAGoC,YAAY,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACxB,GAAG,CAACO,KAAK,IAAIA,KAAK,CAACJ,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;MACjF,CAAC,MAAM;QACLlB,IAAI,CAACE,MAAM,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;MAC1D;MAEAF,IAAI,CAACI,QAAQ,CAACiB,IAAI,CAAC;QACjBC,KAAK,EAAE,aAAa;QACpBtB,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC1BuB,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,uBAAuB;QACpCC,WAAW,EAAE,CAAC;QACdC,oBAAoB,EAAE,uBAAuB;QAC7CC,gBAAgB,EAAE,MAAM;QACxBC,gBAAgB,EAAE,CAAC;QACnBC,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE,CAAC;QACnBC,IAAI,EAAE3C,SAAS,KAAK;MACtB,CAAC,CAAC;IACJ;IAEAQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,IAAI,CAAC;IAC1C,OAAO;MAAEA,IAAI;MAAEC,IAAI,EAAEb;IAAU,CAAC;EAClC,CAAC;EAED,MAAMoD,YAAY,GAAG;IACnBC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE;MACZ,CAAC;MACD5D,KAAK,EAAE;QACL6D,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE9D;MACR;IACF,CAAC;IACD+D,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACjE,SAAS,EAAE,OAAO,IAAI;IAE3B,MAAMkE,WAAW,GAAG;MAClBpD,IAAI,EAAEd,SAAS;MACfmE,OAAO,EAAEb,YAAY;MACrBc,MAAM,EAAE;IACV,CAAC;IAED,QAAQlE,SAAS;MACf,KAAK,KAAK;QACR,oBAAOd,OAAA,CAACP,GAAG;UAAA,GAAKqF;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MACjC,KAAK,KAAK;QACR,oBAAOpF,OAAA,CAACN,GAAG;UAAA,GAAKoF;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MACjC,KAAK,UAAU;QACb,oBAAOpF,OAAA,CAACL,QAAQ;UAAA,GAAKmF;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MACtC,KAAK,SAAS;QACZ,oBAAOpF,OAAA,CAACJ,OAAO;UAAA,GAAKkF;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MACrC,KAAK,OAAO;QACV,oBAAOpF,OAAA,CAACH,KAAK;UAAA,GAAKiF;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MACnC;QACE,oBAAOpF,OAAA,CAACR,IAAI;UAAA,GAAKsF;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;IACpC;EACF,CAAC;EAED,IAAIlE,SAAS,EAAE;IACb,oBACElB,OAAA,CAACE,cAAc;MAAAmF,QAAA,eACbrF,OAAA,CAACO,cAAc;QAAA8E,QAAA,EAAC;MAAmB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAErB;EAEA,IAAIpE,KAAK,EAAE;IACT,oBACEhB,OAAA,CAACE,cAAc;MAAAmF,QAAA,gBACbrF,OAAA,CAACM,YAAY;QAAA+E,QAAA,gBACXrF,OAAA;UAAAqF,QAAA,EAAQ;QAAY;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACpE,KAAK;MAAA;QAAAiE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACfpF,OAAA,CAACQ,SAAS;QAAA6E,QAAA,gBACRrF,OAAA;UAAAqF,QAAA,EAAQ;QAAW;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAChE,SAAS,eACvCpB,OAAA;UAAAiF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNpF,OAAA;UAAAqF,QAAA,EAAQ;QAAU;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAC1E,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE4E,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,KAC3D;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAErB;EAEA,oBACEpF,OAAA,CAACE,cAAc;IAAAmF,QAAA,gBACbrF,OAAA,CAACI,UAAU;MAAAiF,QAAA,EAAE1E;IAAK;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eAChCpF,OAAA;MAAKuF,KAAK,EAAE;QAAEP,MAAM,EAAE,OAAO;QAAET,QAAQ,EAAE;MAAW,CAAE;MAAAc,QAAA,EACnDR,WAAW,CAAC;IAAC;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eACNpF,OAAA,CAACQ,SAAS;MAAA6E,QAAA,gBACRrF,OAAA;QAAAqF,QAAA,EAAQ;MAAW;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAAChE,SAAS;IAAA;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAErB,CAAC;AAED,eAAe3E,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}